--[[
	DOCUMENTATION:
	* MOST FUNCTIONS SHOULD RETURN A INSANITYCORE GUI INSTANCE!
	* A LIMIT OF ONE GUI INSTANCE OF INSANITYCORE AT A TIME!

	STYLES:
		Dark
		Light
		
	:NewStyle(StyleData: {})

	:Create(Style: {}): GUI
	:Destroy()
	
	:GetTitle(): TextLabel (guititle)
	:SetTitle(string)

]]



-- / Services \ --
local CoreGui = game:GetService("CoreGui")
local Players = game:GetService("Players")
-- \          / --

-- / Variables \ --
local Client = Players.LocalPlayer

local InsanityCore = {}
InsanityCore.Instance = nil
InsanityCore.Styles = {
	--[[
	Example = {
		ex.. ["type"] = {
			["name_here"] = {
			}
			["_default"] = {} -- only include when you have a general style for the classtype
		}
	}
	]]
	Dark = {
		["ScreenGui"] = {
			["_default"] = {
				["IgnoreGuiInset"] = true
			}
		},
		["Frame"] = {
			["IcMain"] = {
				["BackgroundColor3"] = Color3.fromRGB(32,32,32)
			},
			--["_default"] = {}
		},
		["UIStroke"] = {
			["IcMainBorderStroke"] = {
				["Color"] = Color3.fromRGB(0,0,0)
			},
			["IcTitleTextStroke"] = {
				["Transparency"] = 0.3
			}
			--["_default"] = {}
		},
		["TextLabel"] = {
			["IcTitle"] = {
				["TextColor3"] = Color3.fromRGB(255, 255, 255),
				["Font"] = Font.new("rbxasset://fonts/families/FredokaOne.json", Enum.FontWeight.Regular, Enum.FontStyle.Normal)
			}
		},
	},
	White = {},
}
InsanityCore.Settings = {
	DefaultStyle = InsanityCore.Styles.Dark,
	Create = {
		Loading = {
			Loads = false,
			LoadTime = 10,
			LoadIcon = ""
		}
	},
}
-- \           / --

-- / Functionality \ --

-- * SELF FUNCTIONS * --

function ApplyStyleTo(Element, Style)
	local Elements = Element:GetDescendants()
	table.insert(Elements, Element)
	for _, Object in Elements do
		local StyleData = Style[Object.ClassName]
		if StyleData then
			local SpecificData = StyleData[Object.Name] or StyleData["_default"] or {}
			for Property, Value in SpecificData do
				if Object[Property] then
					Object[Property] = Value
				end
			end
		end
	end
end

function Prompt(PromptData: {})
	-- to be made with gui later :)
	if PromptData["type"] == "Message" then
		warn(PromptData["Title"], ":", PromptData["Description"], ": Icon Provided:", PromptData["Icon"])
	else
		warn(`Internal error whilst prompting. Type provided: {PromptData["type"] or "nil"}`)
	end
end

-- * GLOBAL FUNCTIONS * --

function InsanityCore:Create(Style: string | nil | {}, Settings: {})
	-- Checks that will make the Style, and actual style
	if Style == nil then
		Style = InsanityCore.Settings.DefaultStyle
	elseif typeof(Style) == "string" then
		for Name, StyleData in InsanityCore.Styles do
			if Name == Style then Style = StyleData end
		end
	end
	
	-- Just incase that the first set of checks didn't work because of invalid arguments.
	if Style == nil or typeof(Style) == "string" or typeof(Style) ~= "table" then
		Prompt({
			["type"] = "Message",
			["Title"] = "Failed to create an instance of InsanityCore!",
			["Description"] = "Invalid parameters were provided into the creation function.",
			["Icon"] = "Error",
		})
		return
	end
	
	-- Checking if there is another instance of InstanityCore
	if InsanityCore.Instance ~= nil then
		InsanityCore.Instance:Destroy()
	end
	
	-- Creation Process
	local function New(ClassType: string, Name: string, Parent: Instance): Instance
		local NewInstance = Instance.new(ClassType, Parent)
		NewInstance.Name = Name
		return NewInstance
	end
	
	local Gui = New("ScreenGui", "InsanityCoreUiObject", CoreGui)
	InsanityCore.Instance = Gui
	local IcMain = New("Frame", "IcMain", Gui)
	IcMain.Position = UDim2.fromScale(0.5, 0.5)
	IcMain.AnchorPoint = Vector2.new(0.5, 0.5)
	IcMain.Size = UDim2.new(0.325, 0, 0.5, 0)
	local IcMainBorderStroke = New("UIStroke", "IcMainBorderStroke", IcMain)
	IcMainBorderStroke.Thickness = 2
	IcMainBorderStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
	local IcMainUICorner = New("UICorner", "IcMainUICorner", IcMain)
	IcMainUICorner.CornerRadius = UDim.new(0.03, 0)
	local IcTitle = New("TextLabel", "IcTitle", IcMain)
	IcTitle.Size = UDim2.fromScale(1, 0.1)
	IcTitle.Position = UDim2.fromScale(0.015, -0.1)
	IcTitle.BackgroundTransparency = 1
	IcTitle.TextSize = 30
	local IcTitleTextStroke = New("UIStroke", "IcTitleTextStroke", IcTitle)
	IcTitleTextStroke.Thickness = 1.5
	ApplyStyleTo(Gui, Style)
end

--function InsanityCore:Open()
	
--end

function InsanityCore:Destroy()
	if InsanityCore.Instance ~= nil then
		InsanityCore.Instance:Destroy()
		InsanityCore.Instance = nil
	end
end

return InsanityCore
-- \               / --
